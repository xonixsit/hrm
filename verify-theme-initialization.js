/**
 * Theme System Initialization Verification
 * 
 * This script verifies that the theme system is properly initialized
 * and that theme classes are being applied to the document root.
 */

console.log('üîç Theme System Initialization Verification');
console.log('='.repeat(50));

// Check if we're in a browser environment
if (typeof window !== 'undefined' && typeof document !== 'undefined') {
  
  // Function to check theme state
  const checkThemeState = () => {
    const root = document.documentElement;
    const hasLightClass = root.classList.contains('theme-light');
    const hasDarkClass = root.classList.contains('theme-dark');
    
    console.log('üìä Document Root Theme Classes:');
    console.log(`  ‚Ä¢ theme-light: ${hasLightClass ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ theme-dark: ${hasDarkClass ? '‚úÖ' : '‚ùå'}`);
    
    // Check CSS custom properties
    const computedStyle = getComputedStyle(root);
    const neutralColor = computedStyle.getPropertyValue('--color-neutral-50').trim();
    const primaryColor = computedStyle.getPropertyValue('--color-primary-500').trim();
    
    console.log('üé® CSS Custom Properties:');
    console.log(`  ‚Ä¢ --color-neutral-50: ${neutralColor || 'Not found'}`);
    console.log(`  ‚Ä¢ --color-primary-500: ${primaryColor || 'Not found'}`);
    
    // Determine current theme
    let currentTheme = 'unknown';
    if (hasLightClass && !hasDarkClass) {
      currentTheme = 'light';
    } else if (hasDarkClass && !hasLightClass) {
      currentTheme = 'dark';
    } else if (hasLightClass && hasDarkClass) {
      currentTheme = 'conflicted (both classes present)';
    }
    
    console.log(`üåü Current Theme: ${currentTheme}`);
    
    return {
      hasLightClass,
      hasDarkClass,
      currentTheme,
      hasCustomProperties: !!(neutralColor && primaryColor)
    };
  };
  
  // Initial check
  console.log('‚è∞ Initial Theme State Check:');
  const initialState = checkThemeState();
  
  // Wait for potential theme initialization
  setTimeout(() => {
    console.log('\n‚è∞ After 1 Second (Post-Initialization):');
    const postInitState = checkThemeState();
    
    // Compare states
    console.log('\nüìà State Comparison:');
    if (initialState.currentTheme !== postInitState.currentTheme) {
      console.log(`  ‚Ä¢ Theme changed: ${initialState.currentTheme} ‚Üí ${postInitState.currentTheme}`);
    } else {
      console.log(`  ‚Ä¢ Theme remained: ${postInitState.currentTheme}`);
    }
    
    // Verification results
    console.log('\nüéØ Verification Results:');
    
    if (postInitState.currentTheme === 'light') {
      console.log('‚úÖ SUCCESS: Theme system is working correctly!');
      console.log('   ‚Ä¢ Light theme is properly applied');
      console.log('   ‚Ä¢ Document root has correct theme class');
    } else if (postInitState.currentTheme === 'dark') {
      console.log('‚ö†Ô∏è  NOTICE: Dark theme is applied');
      console.log('   ‚Ä¢ This might be expected based on user preference');
      console.log('   ‚Ä¢ Theme system appears to be working');
    } else if (postInitState.currentTheme === 'conflicted (both classes present)') {
      console.log('‚ùå ISSUE: Multiple theme classes detected');
      console.log('   ‚Ä¢ Both theme-light and theme-dark are present');
      console.log('   ‚Ä¢ This indicates a cleanup issue');
    } else {
      console.log('‚ùå ISSUE: No theme classes found');
      console.log('   ‚Ä¢ Theme system may not be initialized');
      console.log('   ‚Ä¢ Check if initializeTheme() is being called');
    }
    
    if (postInitState.hasCustomProperties) {
      console.log('‚úÖ CSS custom properties are available');
    } else {
      console.log('‚ùå CSS custom properties are missing');
    }
    
    // Additional diagnostics
    console.log('\nüîß Additional Diagnostics:');
    
    // Check if body has theme-related classes
    const bodyClasses = Array.from(document.body.classList);
    const themeRelatedBodyClasses = bodyClasses.filter(cls => 
      cls.includes('theme') || cls.includes('dark') || cls.includes('light')
    );
    
    if (themeRelatedBodyClasses.length > 0) {
      console.log(`  ‚Ä¢ Body theme classes: ${themeRelatedBodyClasses.join(', ')}`);
    } else {
      console.log('  ‚Ä¢ No theme classes found on body element');
    }
    
    // Check for potential CSS conflicts
    const allRootClasses = Array.from(root.classList);
    console.log(`  ‚Ä¢ All root classes: ${allRootClasses.join(', ') || 'None'}`);
    
    // Final recommendation
    console.log('\nüí° Recommendations:');
    if (postInitState.currentTheme === 'light' && postInitState.hasCustomProperties) {
      console.log('   ‚Ä¢ Theme system is working correctly');
      console.log('   ‚Ä¢ Components should now inherit proper theme styling');
      console.log('   ‚Ä¢ The persistent dark theme issue should be resolved');
    } else {
      console.log('   ‚Ä¢ Theme system needs further investigation');
      console.log('   ‚Ä¢ Check AuthenticatedLayout.vue for proper initializeTheme() call');
      console.log('   ‚Ä¢ Verify useTheme composable is working correctly');
    }
    
  }, 1000);
  
} else {
  console.log('‚ùå Not in browser environment - cannot verify theme state');
}

console.log('\nüìù Note: This verification should be run in the browser console');
console.log('   after the application has loaded and mounted.');